{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "nFrM-25h7JoJ",
        "outputId": "ae3ec5de-3cdc-4521-971f-5460597240dd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: nltk in /usr/local/lib/python3.11/dist-packages (3.9.1)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from nltk) (8.1.8)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from nltk) (1.4.2)\n",
            "Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.11/dist-packages (from nltk) (2024.11.6)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from nltk) (4.67.1)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n",
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]   Package wordnet is already up-to-date!\n",
            "[nltk_data] Downloading package punkt_tab to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt_tab.zip.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset Head:\n",
            "  label                                               text\n",
            "0   ham  Go until jurong point, crazy.. Available only ...\n",
            "1   ham                      Ok lar... Joking wif u oni...\n",
            "2  spam  Free entry in 2 a wkly comp to win FA Cup fina...\n",
            "3   ham  U dun say so early hor... U c already then say...\n",
            "4   ham  Nah I don't think he goes to usf, he lives aro...\n",
            "\n",
            "Missing Values:\n",
            "label    0\n",
            "text     0\n",
            "dtype: int64\n",
            "\n",
            "Label Distribution:\n",
            "label\n",
            "ham     4825\n",
            "spam     747\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Processed Text Sample:\n",
            "                                                text  \\\n",
            "0  Go until jurong point, crazy.. Available only ...   \n",
            "1                      Ok lar... Joking wif u oni...   \n",
            "2  Free entry in 2 a wkly comp to win FA Cup fina...   \n",
            "3  U dun say so early hor... U c already then say...   \n",
            "4  Nah I don't think he goes to usf, he lives aro...   \n",
            "\n",
            "                                      processed_text  \n",
            "0  go jurong point crazi avail bugi n great world...  \n",
            "1                              ok lar joke wif u oni  \n",
            "2  free entri wkli comp win fa cup final tkt may ...  \n",
            "3                u dun say earli hor u c alreadi say  \n",
            "4               nah think goe usf live around though  \n",
            "\n",
            "Logistic Regression Evaluation:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.96      1.00      0.98       966\n",
            "           1       0.99      0.74      0.85       149\n",
            "\n",
            "    accuracy                           0.96      1115\n",
            "   macro avg       0.98      0.87      0.91      1115\n",
            "weighted avg       0.97      0.96      0.96      1115\n",
            "\n",
            "Accuracy: 0.9641255605381166\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAgcAAAGzCAYAAAC7ErTFAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAOXZJREFUeJzt3XlYVGX/x/HPIDogCIjKlqloi5LmHiGuSZLbo2mLS4W7FVru5VPuJmWlaWYumfqYltmePZrmmknumqm5pGlm4Arkhgjn94c/5uEcQKHAoeb9uq5zXc459znnPjOD853v977P2AzDMAQAAPD/3JzdAQAAULQQHAAAABOCAwAAYEJwAAAATAgOAACACcEBAAAwITgAAAAmBAcAAMCE4AAAAJgQHPwNNG3aVE2bNi2w41WqVEndunUrsONBstlsGj16tLO7UeQdPHhQLVq0kK+vr2w2mz777LMCPf4vv/wim82mefPmFehx/84K+v8PuAaCg3yYN2+ebDabtm7d6uyu3NDGjRs1evRoJSUlFep5KlWqJJvN5li8vLx0zz336D//+U+hnhd/3s8//6y+ffuqcuXK8vDwkI+PjyIjIzVlyhRdunSpUM8dExOj3bt366WXXtKCBQtUr169Qj3fzdStWzfZbDb5+Pjk+DwePHjQ8Xfy2muv5fv4J06c0OjRo7Vz584C6C1wfe7O7gBubMWKFfneZ+PGjRozZoy6desmPz8/07b9+/fLza3g4sJatWpp8ODBkqTff/9d77zzjmJiYpSamqrevXsX2HmKskuXLsndvej/OX311Vd6+OGHZbfb9cQTT6h69eq6cuWKNmzYoKFDh2rPnj2aNWtWoZz70qVLio+P1wsvvKB+/foVyjkqVqyoS5cuqXjx4oVy/Btxd3fXxYsX9eWXX+qRRx4xbVu4cKE8PDx0+fLlP3XsEydOaMyYMapUqZJq1aqV5/3+zP8fQNH/3wwqUaJEgR7PbrcX6PFuueUWPfbYY47H3bp1U+XKlTV58uSbHhxcuHBBXl5eN/WckuTh4XHTz5lfR44cUadOnVSxYkWtXr1awcHBjm2xsbE6dOiQvvrqq0I7/6lTpyQpW7BakGw2m1NfC7vdrsjISL3//vvZgoNFixapdevW+vjjj29KXy5evKiSJUsW+P8fcA2UFQrBjh071LJlS/n4+Mjb21vNmzfX999/n63dDz/8oCZNmsjT01Ply5fX+PHjNXfuXNlsNv3yyy+OdjnVDN98803dddddKlmypEqXLq169epp0aJFkqTRo0dr6NChkqTQ0FBHKjPzmDmNOUhKStLAgQNVqVIl2e12lS9fXk888YROnz6d7+svV66cqlatqp9//tm0PiMjQ2+88YbuuusueXh4KDAwUH379tW5c+eytRs9erRCQkJUsmRJNWvWTHv37s3W78wyz7p16/T0008rICBA5cuXd2xftmyZGjVqJC8vL5UqVUqtW7fWnj17TOdKSEhQ9+7dVb58edntdgUHB6tdu3am53/r1q2Kjo5W2bJl5enpqdDQUPXo0cN0nJzGHOTlfZB5Dd99950GDRqkcuXKycvLSw8++KDjw7SgTJw4UefPn9ecOXNMgUGm2267Tc8++6zj8dWrVzVu3DhVqVJFdrtdlSpV0r///W+lpqaa9qtUqZLatGmjDRs26J577pGHh4cqV65sKi2NHj1aFStWlCQNHTpUNptNlSpVknQtmMz8d1ajR4+WzWYzrVu5cqUaNmwoPz8/eXt7684779S///1vx/bcxhysXr3a8V7w8/NTu3bttG/fvhzPd+jQIUfGzdfXV927d9fFixdzf2ItunTpomXLlplKelu2bNHBgwfVpUuXbO3Pnj2rIUOGqEaNGvL29paPj49atmypXbt2OdqsXbtW9evXlyR1797d8TedeZ1NmzZV9erVtW3bNjVu3FglS5Z0PC/W/z9iYmLk4eGR7fqjo6NVunRpnThxIs/Xin8uMgcFbM+ePWrUqJF8fHw0bNgwFS9eXDNnzlTTpk21bt06hYeHS5J+++03NWvWTDabTcOHD5eXl5feeeedPH2rnz17tp555hk99NBDevbZZ3X58mX98MMP2rRpk7p06aIOHTrowIEDev/99zV58mSVLVtW0rUP7ZycP39ejRo10r59+9SjRw/VqVNHp0+f1hdffKHjx4879s+rq1ev6vjx4ypdurRpfd++fTVv3jx1795dzzzzjI4cOaJp06Zpx44d+u677xyp4OHDh2vixIlq27atoqOjtWvXLkVHR+eajn366adVrlw5jRw5UhcuXJAkLViwQDExMYqOjtYrr7yiixcv6u2331bDhg21Y8cOx4dRx44dtWfPHvXv31+VKlXSyZMntXLlSh07dszxuEWLFipXrpyef/55+fn56ZdfftEnn3xy3ecgr++DTP3791fp0qU1atQo/fLLL3rjjTfUr18/LV68OF/P/fV8+eWXqly5sho0aJCn9r169dL8+fP10EMPafDgwdq0aZPi4uK0b98+ffrpp6a2hw4d0kMPPaSePXsqJiZG7777rrp166a6devqrrvuUocOHeTn56eBAweqc+fOatWqlby9vfPV/z179qhNmza6++67NXbsWNntdh06dEjffffddff75ptv1LJlS1WuXFmjR4/WpUuX9OabbyoyMlLbt2/PFpg88sgjCg0NVVxcnLZv36533nlHAQEBeuWVV/LUzw4dOujJJ5/UJ5984ggiFy1apKpVq6pOnTrZ2h8+fFifffaZHn74YYWGhioxMVEzZ85UkyZNtHfvXoWEhKhatWoaO3asRo4cqT59+qhRo0aSZHotz5w5o5YtW6pTp0567LHHFBgYmGP/pkyZotWrVysmJkbx8fEqVqyYZs6cqRUrVmjBggUKCQnJ03XiH85Ans2dO9eQZGzZsiXXNu3btzdKlChh/Pzzz451J06cMEqVKmU0btzYsa5///6GzWYzduzY4Vh35swZw9/f35BkHDlyxLG+SZMmRpMmTRyP27VrZ9x1113X7eurr76a7TiZKlasaMTExDgejxw50pBkfPLJJ9naZmRkXPc8FStWNFq0aGGcOnXKOHXqlLF7927j8ccfNyQZsbGxjnbffvutIclYuHChaf/ly5eb1ickJBju7u5G+/btTe1Gjx5tSDL1O/P1aNiwoXH16lXH+j/++MPw8/MzevfubTpGQkKC4evr61h/7tw5Q5Lx6quv5np9n3766Q1fc8MwDEnGqFGjHI/z+j7IvIaoqCjTcz1w4ECjWLFiRlJS0nXPm1fJycmGJKNdu3Z5ar9z505DktGrVy/T+iFDhhiSjNWrVzvWVaxY0ZBkrF+/3rHu5MmTht1uNwYPHuxYd+TIkRyf75iYGKNixYrZ+jBq1Cgj639RkydPNiQZp06dyrXfmeeYO3euY12tWrWMgIAA48yZM451u3btMtzc3Iwnnngi2/l69OhhOuaDDz5olClTJtdzZr0OLy8vwzAM46GHHjKaN29uGIZhpKenG0FBQcaYMWNyfA4uX75spKenZ7sOu91ujB071rFuy5Yt2a4tU5MmTQxJxowZM3LclvX/D8MwjK+//tqQZIwfP944fPiw4e3tne1vDq6NskIBSk9P14oVK9S+fXtVrlzZsT44OFhdunTRhg0blJKSIklavny5IiIiTAOL/P391bVr1xuex8/PT8ePH9eWLVsKpN8ff/yxatasqQcffDDbNmtaNycrVqxQuXLlVK5cOdWoUUMLFixQ9+7d9eqrrzraLFmyRL6+vrr//vt1+vRpx1K3bl15e3trzZo1kqRVq1bp6tWrevrpp03n6N+/f67n7927t4oVK+Z4vHLlSiUlJalz586mcxUrVkzh4eGOc3l6eqpEiRJau3ZtttJGpsz6+NKlS5WWlnbD50LK3/sgU58+fUzPdaNGjZSenq6jR4/m6Zw3knm+UqVK5an9f//7X0nSoEGDTOszB55axyaEhYU5vs1K17JUd955pw4fPvyn+2yV+Vp8/vnnysjIyNM+v//+u3bu3Klu3brJ39/fsf7uu+/W/fff77jOrJ588knT40aNGunMmTPZXrPr6dKli9auXauEhAStXr1aCQkJOZYUpGvjFDIHCKenp+vMmTOOksn27dvzfE673a7u3bvnqW2LFi3Ut29fjR07Vh06dJCHh4dmzpyZ53Phn4/goACdOnVKFy9e1J133pltW7Vq1ZSRkaFff/1VknT06FHddttt2drltM7queeek7e3t+655x7dfvvtio2NvWFq9Xp+/vlnVa9e/U/vHx4erpUrV2r58uV67bXX5Ofnp3PnzpkGQh08eFDJyckKCAhwBBKZy/nz53Xy5ElJcnwYWp8Hf3//bGWKTKGhoabHBw8elCTdd9992c61YsUKx7nsdrteeeUVLVu2TIGBgWrcuLEmTpyohIQEx7GaNGmijh07asyYMSpbtqzatWunuXPnZqu7Z5Wf90GmChUqmB5nXmtuQYt0bfR/QkKCacmNj4+PJOmPP/7ItU1WR48elZubW7bXISgoSH5+ftmCFmv/M6/hev3Pr0cffVSRkZHq1auXAgMD1alTJ3344YfXDRQy+5nba3H69GlHKSrTn3ktrFq1aqVSpUpp8eLFWrhwoerXr5/r33ZGRoYmT56s22+/XXa7XWXLllW5cuX0ww8/KDk5Oc/nvOWWW/I1+PC1116Tv7+/du7cqalTpyogICDP++KfjzEHf0PVqlXT/v37tXTpUi1fvlwff/yxpk+frpEjR2rMmDE3vT9ly5ZVVFSU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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Naive Bayes Evaluation:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.96      1.00      0.98       966\n",
            "           1       0.98      0.75      0.85       149\n",
            "\n",
            "    accuracy                           0.97      1115\n",
            "   macro avg       0.97      0.87      0.92      1115\n",
            "weighted avg       0.97      0.97      0.96      1115\n",
            "\n",
            "Accuracy: 0.9650224215246637\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Declaration:\n",
            "I, [Your Name], confirm that the work submitted in this assignment is my own and has been completed following academic integrity guidelines. \n",
            "The code is uploaded on my GitHub repository account, and the repository link is provided below:\n",
            "\n",
            "GitHub Repository Link: [Insert GitHub Link]\n",
            "\n",
            "Signature: [Full Name]\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# NLP_Text_Classification_YourName.ipynb\n",
        "\n",
        "# -------------------------------\n",
        "# Course Name: Deep Learnig\n",
        "# Lab Title: NLP Techniques for Text Classification\n",
        "# Student Name: Arhant Nitnaware\n",
        "# Student ID: 25\n",
        "\n",
        "# Objective: Implement NLP preprocessing techniques and build a text classification model using ML\n",
        "# -------------------------------\n",
        "\n",
        "# =======================================\n",
        "# Part 1: NLP Preprocessing\n",
        "# =======================================\n",
        "\n",
        "# Install required packages\n",
        "!pip install nltk\n",
        "\n",
        "# Imports\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem import PorterStemmer, WordNetLemmatizer\n",
        "from nltk.tokenize import word_tokenize\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
        "import string\n",
        "\n",
        "# Download necessary NLTK data\n",
        "nltk.download('punkt')\n",
        "nltk.download('stopwords')\n",
        "nltk.download('wordnet')\n",
        "nltk.download('punkt_tab') # Download the punkt_tab resource\n",
        "\n",
        "# Load Dataset\n",
        "url = \"https://raw.githubusercontent.com/justmarkham/pycon-2016-tutorial/master/data/sms.tsv\"\n",
        "df = pd.read_csv(url, sep='\\t', header=None, names=['label', 'text'])\n",
        "\n",
        "# Explore dataset\n",
        "print(\"Dataset Head:\")\n",
        "print(df.head())\n",
        "print(\"\\nMissing Values:\")\n",
        "print(df.isnull().sum())\n",
        "print(\"\\nLabel Distribution:\")\n",
        "print(df['label'].value_counts())\n",
        "\n",
        "# Text Preprocessing Function\n",
        "def preprocess_text(text):\n",
        "    # Convert to lowercase\n",
        "    text = text.lower()\n",
        "\n",
        "    # Tokenize\n",
        "    tokens = word_tokenize(text)\n",
        "\n",
        "    # Remove punctuation and stopwords\n",
        "    stop_words = set(stopwords.words('english'))\n",
        "    tokens = [word for word in tokens if word not in stop_words and word.isalpha()]\n",
        "\n",
        "    # Stemming\n",
        "    stemmer = PorterStemmer()\n",
        "    tokens = [stemmer.stem(word) for word in tokens]\n",
        "\n",
        "    # Lemmatization\n",
        "    lemmatizer = WordNetLemmatizer()\n",
        "    tokens = [lemmatizer.lemmatize(word) for word in tokens]\n",
        "\n",
        "    return ' '.join(tokens)\n",
        "\n",
        "# Apply preprocessing\n",
        "df['processed_text'] = df['text'].apply(preprocess_text)\n",
        "\n",
        "# Show processed text\n",
        "print(\"\\nProcessed Text Sample:\")\n",
        "print(df[['text', 'processed_text']].head())\n",
        "\n",
        "# =======================================\n",
        "# Vectorization\n",
        "# =======================================\n",
        "\n",
        "# CountVectorizer\n",
        "count_vect = CountVectorizer()\n",
        "X_count = count_vect.fit_transform(df['processed_text'])\n",
        "\n",
        "# TF-IDF Vectorizer\n",
        "tfidf_vect = TfidfVectorizer()\n",
        "X_tfidf = tfidf_vect.fit_transform(df['processed_text'])\n",
        "\n",
        "# Encode target labels\n",
        "df['label_num'] = df['label'].map({'ham': 0, 'spam': 1})\n",
        "\n",
        "# =======================================\n",
        "# Part 2: Train-Test Split and Modeling\n",
        "# =======================================\n",
        "\n",
        "# Train-Test Split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_tfidf, df['label_num'], test_size=0.2, random_state=42)\n",
        "\n",
        "# ------------------\n",
        "# Logistic Regression\n",
        "# ------------------\n",
        "lr_model = LogisticRegression()\n",
        "lr_model.fit(X_train, y_train)\n",
        "lr_pred = lr_model.predict(X_test)\n",
        "\n",
        "print(\"\\nLogistic Regression Evaluation:\")\n",
        "print(classification_report(y_test, lr_pred))\n",
        "print(\"Accuracy:\", accuracy_score(y_test, lr_pred))\n",
        "sns.heatmap(confusion_matrix(y_test, lr_pred), annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"Logistic Regression - Confusion Matrix\")\n",
        "plt.show()\n",
        "\n",
        "# ------------------\n",
        "# Naive Bayes\n",
        "# ------------------\n",
        "nb_model = MultinomialNB()\n",
        "nb_model.fit(X_train, y_train)\n",
        "nb_pred = nb_model.predict(X_test)\n",
        "\n",
        "print(\"\\nNaive Bayes Evaluation:\")\n",
        "print(classification_report(y_test, nb_pred))\n",
        "print(\"Accuracy:\", accuracy_score(y_test, nb_pred))\n",
        "sns.heatmap(confusion_matrix(y_test, nb_pred), annot=True, fmt='d', cmap='Oranges')\n",
        "plt.title(\"Naive Bayes - Confusion Matrix\")\n",
        "plt.show()"
      ]
    }
  ]
}